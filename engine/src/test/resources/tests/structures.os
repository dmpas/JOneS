Перем юТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
    юТест = ЮнитТестирование;

    ВсеТесты = Новый Массив;
    ВсеТесты.Добавить("ТестДолжен_ПроверитьСтруктуру");
    ВсеТесты.Добавить("ТестДолжен_ПроверитьОчистку");
    ВсеТесты.Добавить("ТестДолжен_ПроверитьУдаление");
    ВсеТесты.Добавить("ТестДолжен_ПроверитьСвойство");
    ВсеТесты.Добавить("ТестДолжен_ПроверитьЦикл");
    Возврат ВсеТесты;

КонецФункции

Процедура ТестДолжен_ПроверитьСтруктуру() Экспорт

    Коллекция = Новый Структура;

    юТест.ПроверитьТип(Коллекция, "Структура");

    юТест.ПроверитьРавенство(Коллекция.Количество(), 0);

    Коллекция.Вставить("Ключ");
    Коллекция.Вставить("Ключ2", "Строка");

    юТест.ПроверитьРавенство(Коллекция.Количество(), 2);

    юТест.ПроверитьРавенство(Коллекция.Ключ, Неопределено);
    юТест.ПроверитьРавенство(Коллекция.Ключ2, "Строка");

    Коллекция.Вставить("_Ключ");
    юТест.ПроверитьРавенство(Коллекция._Ключ, Неопределено);

    Коллекция.Вставить("_Ключ", "1");
    юТест.ПроверитьРавенство(Коллекция._Ключ, "1");

    Коллекция._Ключ = "2";
    юТест.ПроверитьРавенство(Коллекция._Ключ, "2");

    БылоИсключение = Ложь;
    Попытка
        Коллекция.Вставить("1Ключ");
    Исключение
        БылоИсключение = Истина;
    КонецПопытки;
    юТест.ПроверитьРавенство(БылоИсключение, Истина);

    БылоИсключение = Ложь;
    Попытка
        Коллекция.Вставить(1);
    Исключение
        БылоИсключение = Истина;
    КонецПопытки;
    юТест.ПроверитьРавенство(БылоИсключение, Истина);

    Коллекция.Вставить("НовыйКлюч", Неопределено);
    Коллекция["НовыйКлюч"] = "101";
    юТест.ПроверитьРавенство(Коллекция["НовыйКлюч"], "101");

КонецПроцедуры

Процедура ТестДолжен_ПроверитьОчистку() Экспорт

    Структура = Новый Структура;
    Структура.Вставить("Ключ1");
    Структура.Вставить("Ключ2");

    юТест.ПроверитьРавенство(Структура.Количество(), 2);

    Структура.Очистить();
    юТест.ПроверитьРавенство(Структура.Количество(), 0);

    Структура.Вставить("Ключ1");
    юТест.ПроверитьРавенство(Структура.Количество(), 1);

КонецПроцедуры

Процедура ТестДолжен_ПроверитьУдаление() Экспорт

    Структура = Новый Структура;
    Структура.Вставить("Ключ1");
    Структура.Вставить("Ключ2");
    Структура.Вставить("Ключ3");

    юТест.ПроверитьРавенство(Структура.Количество(), 3);

    Структура.Удалить("Ключ2");
    юТест.ПроверитьРавенство(Структура.Количество(), 2);

    Структура.Удалить("Ключ2");
    юТест.ПроверитьРавенство(Структура.Количество(), 2);

КонецПроцедуры

Процедура ТестДолжен_ПроверитьСвойство() Экспорт

    Структура = Новый Структура;
    Структура.Вставить("Ключ", "Значение");

    Значение = Неопределено;

    КлючНайден = Структура.Свойство("Ключ", Значение);

    юТест.ПроверитьРавенство(КлючНайден, Истина);
    юТест.ПроверитьРавенство(Значение, "Значение");

    КлючНайден = Структура.Свойство("Ключ2", Значение);

    юТест.ПроверитьРавенство(КлючНайден, Ложь);
    юТест.ПроверитьРавенство(Значение, Неопределено);

КонецПроцедуры

Процедура ТестДолжен_ПроверитьЦикл() Экспорт

    Структура = Новый Структура;
    Структура.Вставить("А", "Значение 1");
    Структура.Вставить("Б", "Значение 2");
    Структура.Вставить("В", "Значение 3");

    КоличествоИтераций = 0;

    Для Каждого КлючИЗначение Из Структура Цикл

        КоличествоИтераций = КоличествоИтераций + 1;

        Если КоличествоИтераций = 1 Тогда
            юТест.ПроверитьРавенство(КлючИЗначение.Ключ, "А");
        ИначеЕсли КоличествоИтераций = 2 Тогда
            юТест.ПроверитьРавенство(КлючИЗначение.Ключ, "Б");
        ИначеЕсли КоличествоИтераций = 3 Тогда
            юТест.ПроверитьРавенство(КлючИЗначение.Ключ, "В");
        КонецЕсли;

    КонецЦикла;

    юТест.ПроверитьРавенство(КоличествоИтераций, 3);

КонецПроцедуры